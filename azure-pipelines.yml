# CI
# Build and push an image to Azure Container Registry
trigger:
- master
- feature/*

resources:
- repo: self

variables:
  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '1a185990-8378-4f34-9718-14dbb933e91c'
  imageRepository: 'bootcampappgit5'
  containerRegistry: 'stagereg.azurecr.io'
  dockerfilePath: '$(Build.SourcesDirectory)/DockerFile'
  tag: '$(Build.BuildId)'


stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      name: my-pool2
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)


# CD staging
- stage: DeployToStaging
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: staging
    displayName: Deploy to Staging
    environment:
      name: staging
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
              script: 'docker rm -f  webapp || true'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'

          - task: Bash@3
            inputs:
              targetType: 'inline'
              script: 'docker run --restart=always -d --name webapp -p 8080:8080 -e PGHOST=$(PGHOST) -e PGUSERNAME=$(PGUSERNAME) -e PGDATABASE=postgres -e PGPASSWORD=$(PGPASSWORD) -e PGPORT=5432 -e PORT=8080 -e HOST=0.0.0.0 -e HOST_URL=$(HOST_URL) -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD) -e NODE_ENV=development -e OKTA_ORG_URL=$(OKTA_ORG_URL) -e OKTA_CLIENT_ID=$(OKTA_CLIENT_ID) -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRET) $(containerRegistry)/$(imageRepository):$(tag)'
              
# CD prod
- stage: DeployToProduction
  condition: and(succeeded(), eq(variables['build.sourceBranch'], 'refs/heads/master'))
  jobs:
  - deployment: prod
    displayName: Deploy to Production
    environment:
      name: prod
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:
          - task: CmdLine@2
            displayName: Stop Current Container
            inputs:
              script: 'docker rm -f  webapp || true'
          - task: Docker@2
            displayName: 'Login to Registry'
            inputs:
              containerRegistry: $(dockerRegistryServiceConnection)
              command: 'login'

          - task: Bash@3
            inputs:
             targetType: 'inline'
             script: 'docker run --restart=always  -d --name webapp -p 8080:8080 -e PGHOST=$(PGHOSTT) -e PORT=8080 -e HOST=0.0.0.0 -e PGUSERNAME=$(PGUSERNAMEE) -e PGDATABASE=postgres -e  PGPASSWORD=$(PGPASSWORD)  -e  PGPORT=5432   -e HOST_URLL=$(HOST_URLL)   -e COOKIE_ENCRYPT_PWD=$(COOKIE_ENCRYPT_PWD)   -e  NODE_ENV=development   -e  OKTA_ORG_URL=$(OKTA_ORG_URL)   -e  OKTA_CLIENT_ID=$(OKTA_CLIENT_IDD)   -e OKTA_CLIENT_SECRET=$(OKTA_CLIENT_SECRETT)  $(containerRegistry)/$(imageRepository):$(tag)'
